version: '3.18'

services:
  sv-dns:
    env_file: .env
    build:
      dockerfile: docker/coredns.Dockerfile
      context: .
    image: koh/sv-coredns
    container_name: sv-coredns
    ports:
      - "853:53/udp" # testing DNS resolve from host: `dig @127.0.0.1 -p 853 <container-name>.vps-network`
    restart: on-failure
    networks:
      vps-network:
      dns-network:
        ipv4_address: 10.5.0.5
      mail-network:
      sv-network:
    deploy:
      resources:
        limits:
          cpus: 0.8
          memory: 128M

  sv-db:
    env_file: .env
    build:
      dockerfile: docker/db.Dockerfile
      context: .
    image: koh/db-hub
    container_name: sv-database
    profiles:
      - develop
    ports:
      - "3306:3306"
    volumes:
      - .docker_cache/db_data:/var/lib/mysql
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: 512M

  sv-zoo:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: sv-zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: 128M

  sv-kafkacluster1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: sv-kafkacluster1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://sv-kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "sv-zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - sv-zoo
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: 512M

  sv-mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: sv-mailserver
    # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)
    hostname: mail.sinhvien.in
    ports:
      - "25:25"
      - "465:465"
      - "587:587"
      - "993:993"
    volumes:
      - ./.docker_cache/dms/mail-data/:/var/mail/
      - ./.docker_cache/dms/mail-state/:/var/mail-state/
      - ./.docker_cache/dms/mail-logs/:/var/log/mail/
      - ./.docker_cache/dms/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
    environment:
      - ENABLE_RSPAMD=1
      - ENABLE_CLAMAV=1
      - ENABLE_FAIL2BAN=1
    cap_add:
      - NET_ADMIN # For Fail2Ban to work
    restart: always
    networks:
      - mail-network
    deploy:
      resources:
        limits:
          cpus: 0.2
          memory: 64M

networks:
  vps-network:
    driver: bridge
    external: true

  dns-network:
    driver: bridge
    external: true

  mail-network:
    driver: bridge
    external: true

  kafka-network:
    driver: bridge
    external: true

  sv-network:
    driver: bridge
    external: true

